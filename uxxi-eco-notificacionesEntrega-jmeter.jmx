<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Gestión económica - Notificaciones de entrega" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">{
        &quot;url&quot;: &quot;http://test.redocu.lan/ServiciosApp/faces/inicioServicios&quot;,
        &quot;name&quot;: &quot;admin_cc&quot;,
        &quot;pass&quot;: &quot;admin_cc1&quot;,
        &quot;valorTituloPantalla&quot;: &quot;Notificaciones de entrega&quot;,
        &quot;fechaInicio&quot; : &quot;1/08/2018&quot;,
        &quot;fechaFin&quot; : &quot;3/10/2018&quot;,
          &quot;fechaEntrega&quot; : &quot;14/09/2018&quot;,
          &quot;numero&quot;: &quot;NOT-00000268&quot;,
          &quot;expediente&quot; : &quot;EXP092/2015/19&quot;,
          &quot;objetoContrato&quot; : &quot;Suministro e instalación de servidores centrales y almacenamiento para el sistema de soporte al Campus Virtual de la Universidad de Cádiz, con destino en el edificio CITI&quot;,
          &quot;pedido&quot; : &quot; &quot;,
          &quot;estadoTramitacion&quot; : &quot;Cerrada&quot;,
          &quot;estadoEntrega&quot; : &quot;Correcto&quot;
      }</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">datos</stringProp>
            <stringProp name="JSONPATH">$.*</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui, org.openqa.selenium.interactions, org.openqa.selenium.Keys); //WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 25000)
var actions = new org.openqa.selenium.interactions.Actions(WDS.browser)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions);

WDS.sampleResult.sampleStart()
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()
var url = vars.get(&apos;datos_1&apos;)
WDS.browser.get(url)

// Logueamos en la aplicación

var element = WDS.browser.findElement(pkg.By.id(&quot;c2&quot;))
actions.moveToElement(element);
actions.sendKeys([vars.get(&apos;datos_2&apos;)]);
actions.sendKeys([pkg.Keys.TAB]);
actions.sendKeys([vars.get(&apos;datos_3&apos;)]);
actions.sendKeys([pkg.Keys.TAB]);
actions.sendKeys([pkg.Keys.ENTER]);
actions.build().perform();

var btnMenuGestionEconomica = WDS.browser.findElement(pkg.By.xpath(&apos;//nobr[text()=&quot;Gestión económica&quot;]/ancestor::h1&apos;));
wait.until(pkg.ExpectedConditions.visibilityOf(btnMenuGestionEconomica));

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - Notificaciones" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui); //WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 25000)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions);

WDS.sampleResult.sampleStart()
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

// Accedemos a la opción del menu
var btnMenuGestionEconomica = WDS.browser.findElement(pkg.By.xpath(&apos;//nobr[text()=&quot;Gestión económica&quot;]/ancestor::h1&apos;));

wait.until(pkg.ExpectedConditions.elementToBeClickable(btnMenuGestionEconomica));
btnMenuGestionEconomica.click();


wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//a[text()=&apos;Notificaciones de entrega&apos;]&quot;)));
var linkNotificacionesEntrega = WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;Notificaciones de entrega&apos;]&quot;));


wait.until(pkg.ExpectedConditions.elementToBeClickable(linkNotificacionesEntrega));
linkNotificacionesEntrega.click();

// Introducimos rango de Fechas
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@class=&apos;af_inputDate_content&apos;]&quot;)));
var fechaDesde = WDS.browser.findElements(pkg.By.xpath(&quot;//input[@class=&apos;af_inputDate_content&apos;]&quot;)).get(0);
var fechaHasta = WDS.browser.findElements(pkg.By.xpath(&quot;//input[@class=&apos;af_inputDate_content&apos;]&quot;)).get(1);

fechaDesde.sendKeys([vars.get(&apos;datos_5&apos;)]);
fechaHasta.sendKeys([vars.get(&apos;datos_6&apos;)]);

// Clicamos el botón de mostrar
var btnMostrar = WDS.browser.findElement(pkg.By.xpath(&quot;//button[text()=&apos;Mostrar&apos;]&quot;));
btnMostrar.click();

// Esperamos a que aparezca la tabla de resultados
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[contains(@class, &apos;af_table_data-body&apos;)]//td&quot;)));
var listaResultados = WDS.browser.findElements(pkg.By.xpath(&quot;//div[contains(@class, &apos;af_table_data-body&apos;)]//td&quot;));

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
